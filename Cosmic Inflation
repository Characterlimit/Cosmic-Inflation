import ddf.minim.*;


PVector anchor;


int fireball_timer;
int charge_timer;
int SHOT_COOLDOWN = 90;
float SHOT_MINDIST = 60;
int cooldown_timer;
int score_timer;
int SCORE_TIME = 30;
int BURNT_TIME = 90;
int APPEAR_TIME = 360;
int burnt_timer;
boolean[] keys = new boolean[256];
boolean title;
boolean paused;
boolean muted;
boolean game_over;
int score;
int top_score;
int difficulty_timer = 0;

PImage backgroundPic; //Added Space Themed Background

int drawing_ms_last;
int physics_ms_last;
int CORE_FPS = 540;
int DRAWING_FPS = 60;
int PHYSICS_FPS = 180;
int DRAW_MS = 1000 / DRAWING_FPS;
int PHYS_MS = 1000 / PHYSICS_FPS;
int phys_clock;

Minim minim;

AudioSample comboSound;
AudioSample popSound;
AudioSample shotSound;
AudioSample burntSound;
AudioSample appearSound;


GameList fireballs = new GameList();
GameList shots = new GameList();
ParticleList particles = new ParticleList();


PImage crosshair;



float FIREBALL_DESCEND_SPEED = .15;
float FIREBALL_MAX_OMEGA = 1.3;
float FIREBALL_SPAWN_RADIUS = 700;
float FIREBALL_RADIUS = 20;

float DESSERT_RADIUS = 90;
float WARN_RADIUS = 300;

int SHOT_LIFE = 120;




void setup()
{
  //Screen Size
  size(1440, 900);
  
  //Frame Rate
  frameRate(600);
  
  //This is the background image
  //backgroundPic=loadImage("SpacePic.png");
  
  //This is the image for the cross hair
  crosshair = loadImage("crosshair.png");
  
  
  //This function initializes all the audio samples that will be played in the game
  audioInit();
  
  //This function is used to set the Title flag as true  
  setTitle();
}


//This function uses the Minim object of the DDF Library and loads the wav files for using in the game
//Use this function to load all the future audio samples into the game as well
void audioInit()
{
  minim = new Minim(this);
  comboSound = minim.loadSample("combo.wav", 1024);
  popSound = minim.loadSample("pop.wav", 1024);  
  shotSound = minim.loadSample("shot.wav", 1024);  
  shotSound.setGain(-10);

  burntSound = minim.loadSample("burnt.wav", 1024);  
  appearSound = minim.loadSample("appear.wav", 1024);  
}



//This function sets the title flag as true. This flag will be used to display the title information
void setTitle()
{
  title = true;
  game_over = true;
}




void draw()
{
  cursor(crosshair);
  
  //In draw function, I have a small hack which will get us the smooth effect.  For making the shots and meteors move at a certain pace and make the 
  //screen have a different frames per second, we have two functions called Physics Step and another one called as Drawing Step. The physics step as the name suggests makes the 
  //physics movements and the drawing step is essentially a draw function for all the sprites in the games. We can experiment a little on the feel of the game by making changes at
  //physics_fps and drawing_fps
  
  
  //This function will make all the sprites move as per our algorithm. Here unless the time reaches the point where it is supposed to make the step, the function for moving the
  //sprites won't happen
  while(physics_ms_last + PHYS_MS < millis())
  {
    if(!paused)
    {
      physicsStep();
    }
    physics_ms_last += PHYS_MS;
  }
  
  
  //This function will draw all the sprites. Here unless the time reaches the point where it is supposed to make the step, the function for drawing the
  //sprites won't happen
  if(drawing_ms_last + DRAW_MS < millis())
  {
    drawingStep();
    drawing_ms_last = millis();
   }
}

//This function is to make the steps as per the physics
void physicsStep()
{
   
  phys_clock++;
  
  if(!title)
  {
    //main game loop
    fireballs.tick();
    shots.tick();
    particles.tick();
    
    //This timer is for addition of meteors onto the screen. Once the timer hits 0, another meteor will be added onto the game
    fireball_timer --;
    if(fireball_timer <= 0)
    { 
      fireball_timer = fireTime();
      fireballs.add(new Fireball());
    }
    
    //This is to identify the mousepressed event and to increase the charge amount
    if(mousePressed) 
      charge_timer++;
    else 
      charge_timer = 0;
    
    cooldown_timer --;
    difficulty_timer+=5;//difficulty increase faster
    if(score_timer > 0) 
      score_timer--;
    
    burnt_timer--;
    
    if(burnt_timer == -APPEAR_TIME) if(!muted) appearSound.trigger();
        
    top_score = max(score, top_score);
  }
  
}



//This is for adding points to the score
void points(int pts)
{
  score += pts;
  score_timer = max(score_timer, SCORE_TIME);
}



//This is the time in which the meteors will be generated. As  you can see it is being dynamically generated on the fly depending on the difficulty timer
//Difficulty timer increases with every physics step
//We can try tweaking difficulty timer to experiment 
int fireTime()
{
  return PHYSICS_FPS * 10 / (7 + difficulty_timer / (PHYSICS_FPS * 15));
}


//This is for closing all the opened audio samples
void audioClose()
{
  comboSound.close();
  popSound.close();
  shotSound.close();
  burntSound.close();
  minim.stop();
}



//Whenever someone presses enter, then when new game starts everything will be initialized in this function
void newGame()
{
  fireballs.clear();
  
  cooldown_timer = 0;
  charge_timer = 0;
  fireball_timer = 0;
  difficulty_timer = 0;
  score_timer = 0;
  burnt_timer = 0;
  
  game_over = false;
  title = false;
  score = 0;
}

void stop()
{
  audioClose();
  super.stop();
}


//This function is used to fixate the point when someone pressed the mouse button
void mousePressed()
{
  if(!paused && !title)
  {
    anchor = new PVector(mouseX, mouseY);
  }
  if(title) newGame();
}


//In this function the logic for finding the shot angle and checking if the mouse has been pulled for certain distance are present are not
void mouseReleased()
{
  if(!paused && !title && anchor != null && cooldown_timer <= 0)
  {
    //This will help in finding the shot angle
    PVector shotangle = new PVector(anchor.x - mouseX, anchor.y - mouseY);
    shotangle.normalize();
    shotangle.mult(10);
    
    //This will help in checking if the anchor has been pulled for a distance or not. Currently the min dist for pulling is set at 60. Once the anchor has been pulled for enough
    //distance it will create a new shot 
    //We can tweak and see if we can remove that cutting through the meteor thing disabled.
    if(shotangle.mag() > 0 && PVector.dist(new PVector(mouseX, mouseY), anchor) > SHOT_MINDIST)
    {
     shots.add(new Coldshot(new PVector(mouseX, mouseY), shotangle));
     cooldown_timer = SHOT_COOLDOWN;
     if(!muted) shotSound.trigger();
    }
  }
}


//This is just a drawing step for drawing all the sprites in the game
void drawingStep()
{
  if(title)
  {
    drawTitle();
  }
  else if(game_over)
  {
     drawGameOver();
  }
  else
  { 
    
    //background(backgroundPic);
    //background(200, 100, 70);
    background(32, 0, 64);
    ellipseMode(RADIUS);
    fill(204, 255, 100, 48);
    stroke(250, 0, 0, 90);
    strokeWeight(2);
    ellipse(width/2, height/2, 90, 90);
    
    //This is for the thing in the center
    fill(255, 255-score, 255-score);//Color Change
    noStroke();
    int sizer = score/5;
    if(sizer<=10){
      sizer=10;
    }
    if(sizer>90){
     sizer=90; 
    }
      
     
    ellipse(width/2, height/2, sizer, sizer);
    
    particles.draw();
    fireballs.draw();
    shots.draw();
    smooth();
    if(mousePressed && anchor != null)
    {
      noFill();
      stroke(255, 128);
      if(PVector.dist(new PVector(mouseX, mouseY), anchor) > SHOT_MINDIST) stroke(96, 255, 255);
      strokeWeight(1);
      ellipse(anchor.x, anchor.y, 10, 10);
      PVector lead = new PVector(anchor.x - mouseX, anchor.y - mouseY);
      lead.normalize();
      lead.mult(1000);
      lead.add(anchor);
      line(anchor.x, anchor.y, mouseX, mouseY);
      
      stroke(255, 32);
      if(PVector.dist(new PVector(mouseX, mouseY), anchor) > SHOT_MINDIST) stroke(96, 255, 255, 64);
      line(anchor.x, anchor.y, lead.x, lead.y);
    }
    else
    {
      noFill();
      stroke(255, 128);
      strokeWeight(1);
      ellipse(mouseX, mouseY, 12, 12);
    }
    noSmooth();
    
    fill(255, 128 + 127* score_timer / SCORE_TIME);
    textAlign(RIGHT, TOP);
    text(score, width-15, 8);
    fill(255, 128);
    text("top: "+top_score, width-15, 64);
    
    
    if(paused) drawPauseOverlay();
  }
  
}


//These are for drawing title, game over screen and for creating pause overlay over the complete screen
void drawTitle()
{
  background(200, 100, 70);
  fill(255);
  textAlign(CENTER, CENTER);
  text("Cosmic Inflation", width/2, height/2);
  text("Press Enter Or Click To Start The Game", width/2, height*2/3);
}

void drawGameOver()
{
  background(200, 100, 70);
  //background(backgroundPic);
  fill(255);
  textAlign(CENTER, CENTER);
  textSize(64);
  text("Press Enter", width/2, height/2);
  textAlign(RIGHT, TOP);
  text(score, width-15, 8);
  fill(255, 128);
  text("top: "+top_score, width-15, 64);
}
void drawPauseOverlay()
{
  rectMode(CORNER);
  strokeWeight(1);
  noStroke();
  fill(0, 128);
  rect(0, 0, width, height);
  fill(255);
  textAlign(CENTER, CENTER);
  text("[ PAUSED ]", width/2, height/2);
}



//These are the key board handling functions. As of now, we are only using "M" for Mute, "P" for Pause and "Return" for starting a new game.
void keyPressed()
{
  if(keyCode < 256)
  if(!keys[keyCode]) 
  {
    keys[keyCode] = true;
    down(keyCode);
  }
}
void keyReleased()
{
  if(keyCode < 256)
  if(keys[keyCode])
  {
    keys[keyCode] = false;
    up(keyCode);
  }
}
void down(int theKey)
{
  println(theKey + " down");
  if(theKey == 'M') jbToggleMute();
  if(theKey == 'P' && !title) paused = !paused;
  if(theKey == ENTER && game_over) newGame();
}
void up(int theKey)
{
  println(theKey + " up");
}
